#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π Telegram Bot –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
"""

import asyncio
import json
import logging
import os
from datetime import datetime
from typing import Dict, List, Optional

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class SimpleFinanceBot:
    def __init__(self):
        # –ñ–µ—Å—Ç–∫–æ –∑–∞–¥–∞–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω
        self.bot_token = "8008868923:AAFoy6ZTFhSPz37XzVOOft5oXuW8DDVjgZ0"
        self.webapp_url = "http://localhost:3000"
        self.data_file = "simple_bot_data.json"
        self.categories = {
            'expenses': {
                'üçî –ï–¥–∞': 'food',
                'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'transport',
                'üè† –ñ–∏–ª—å–µ': 'housing',
                'üëï –û–¥–µ–∂–¥–∞': 'clothing',
                'üíä –ó–¥–æ—Ä–æ–≤—å–µ': 'health',
                'üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'entertainment',
                'üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'education',
                'üí≥ –ö—Ä–µ–¥–∏—Ç—ã': 'loans',
                'üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'technology',
                'üè¶ –ù–∞–ª–æ–≥–∏': 'taxes',
                'üéÅ –ü–æ–¥–∞—Ä–∫–∏': 'gifts',
                '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': 'travel',
                'üíº –ë–∏–∑–Ω–µ—Å': 'business',
                'üîß –£—Å–ª—É–≥–∏': 'services',
                'üì¶ –ü–æ–∫—É–ø–∫–∏': 'shopping',
                'üí∞ –î—Ä—É–≥–æ–µ': 'other'
            },
            'income': {
                'üíº –ó–∞—Ä–ø–ª–∞—Ç–∞': 'salary',
                'üè¢ –ë–∏–∑–Ω–µ—Å': 'business',
                'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': 'investments',
                'üéÅ –ü–æ–¥–∞—Ä–∫–∏': 'gifts',
                'üè† –ê—Ä–µ–Ω–¥–∞': 'rental',
                'üíª –§—Ä–∏–ª–∞–Ω—Å': 'freelance',
                'üéØ –ü—Ä–µ–º–∏–∏': 'bonuses',
                'üí∞ –î—Ä—É–≥–æ–µ': 'other'
            }
        }
        
        self.load_data()
        self.setup_handlers()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    self.data = json.load(f)
            except:
                self.data = {}
        else:
            self.data = {}
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)
    
    def get_user_data(self, user_id: int) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        user_id_str = str(user_id)
        if user_id_str not in self.data:
            self.data[user_id_str] = {
                'transactions': [],
                'budgets': {},
                'goals': [],
                'currency': 'RUB',
                'settings': {
                    'theme': 'light',
                    'notifications': True,
                    'language': 'ru'
                }
            }
        return self.data[user_id_str]
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
        self.application = Application.builder().token(self.bot_token).build()
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("finance", self.finance_command))
        self.application.add_handler(CommandHandler("app", self.app_command))
        self.application.add_handler(CommandHandler("stats", self.stats_command))
        self.application.add_handler(CommandHandler("balance", self.balance_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤
        self.application.add_handler(CallbackQueryHandler(self.handle_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_text = f"""
üéâ –ü—Ä–∏–≤–µ—Ç, {user.first_name}!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Ñ–∏–Ω–∞–Ω—Å–æ–≤—ã–π –ø–æ–º–æ—â–Ω–∏–∫! üí∞

üì± **–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ /app - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ /finance - –ë—ã—Å—Ç—Ä—ã–π —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤
‚Ä¢ /stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
‚Ä¢ /balance - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
‚Ä¢ /help - –ü–æ–º–æ—â—å

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
        """
        
        keyboard = [
            [
                InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=self.webapp_url)),
                InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å—ã", callback_data="finance_menu")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"),
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            welcome_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìñ **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

üîπ **–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
‚Ä¢ /start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
‚Ä¢ /app - –û—Ç–∫—Ä—ã—Ç—å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ /finance - –ë—ã—Å—Ç—Ä—ã–π —É—á–µ—Ç —Ñ–∏–Ω–∞–Ω—Å–æ–≤
‚Ä¢ /stats - –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
‚Ä¢ /balance - –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å

üîπ **–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è:**
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É —Å + –¥–ª—è –¥–æ—Ö–æ–¥–∞: `+5000`
‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ —Å—É–º–º—É —Å - –¥–ª—è —Ä–∞—Å—Ö–æ–¥–∞: `-1500`
‚Ä¢ –î–æ–±–∞–≤—å—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ: `+5000 –∑–∞—Ä–ø–ª–∞—Ç–∞`

üîπ **–ü—Ä–∏–º–µ—Ä—ã:**
‚Ä¢ `+50000` - –¥–æ–±–∞–≤–∏—Ç—å –¥–æ—Ö–æ–¥ 50000‚ÇΩ
‚Ä¢ `-1500 –µ–¥–∞` - –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥ 1500‚ÇΩ –Ω–∞ –µ–¥—É
‚Ä¢ `+100000 –∑–∞—Ä–ø–ª–∞—Ç–∞` - –¥–æ—Ö–æ–¥ 100000‚ÇΩ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º

üí° **–°–æ–≤–µ—Ç:** –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –±–æ–ª–µ–µ —É–¥–æ–±–Ω–æ–π —Ä–∞–±–æ—Ç—ã!
        """
        
        keyboard = [
            [InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=self.webapp_url))],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            help_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def app_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /app - –æ—Ç–∫—Ä—ã—Ç–∏–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        keyboard = [
            [InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å Finance Tracker", web_app=WebAppInfo(url=self.webapp_url))],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            "üöÄ **Finance Tracker App**\n\n"
            "–û—Ç–∫—Ä–æ–π—Ç–µ –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏:\n"
            "‚Ä¢ üìä –î–∞—à–±–æ—Ä–¥ —Å–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π\n"
            "‚Ä¢ üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è–º–∏\n"
            "‚Ä¢ üéØ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏\n"
            "‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è\n\n"
            "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def finance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /finance"""
        await self.show_finance_menu(update, context)
    
    async def stats_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /stats"""
        await self.show_statistics(update, context)
    
    async def balance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /balance"""
        await self.show_balance(update, context)
    
    async def show_finance_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –º–µ–Ω—é —Ñ–∏–Ω–∞–Ω—Å–æ–≤"""
        keyboard = [
            [
                InlineKeyboardButton("‚ûï –î–æ—Ö–æ–¥", callback_data="add_income"),
                InlineKeyboardButton("‚ûñ –†–∞—Å—Ö–æ–¥", callback_data="add_expense")
            ],
            [
                InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="show_stats"),
                InlineKeyboardButton("üìã –ò—Å—Ç–æ—Ä–∏—è", callback_data="show_history")
            ],
            [
                InlineKeyboardButton("üì± –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=self.webapp_url))
            ],
            [
                InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = "üí∞ **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def show_statistics(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        user_id = update.effective_user.id
        user_data = self.get_user_data(user_id)
        
        # –†–∞—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        transactions = user_data.get('transactions', [])
        total_income = sum(t['amount'] for t in transactions if t['type'] == 'income')
        total_expenses = sum(t['amount'] for t in transactions if t['type'] == 'expense')
        balance = total_income - total_expenses
        
        # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
        expense_categories = {}
        for t in transactions:
            if t['type'] == 'expense':
                cat = t['category']
                expense_categories[cat] = expense_categories.get(cat, 0) + t['amount']
        
        top_expenses = sorted(expense_categories.items(), key=lambda x: x[1], reverse=True)[:3]
        
        stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–Ω–∞–Ω—Å–æ–≤**

üí∞ **–û–±—â–∏–π –±–∞–ª–∞–Ω—Å:** {balance:,.0f}‚ÇΩ
üìà **–î–æ—Ö–æ–¥—ã:** {total_income:,.0f}‚ÇΩ
üìâ **–†–∞—Å—Ö–æ–¥—ã:** {total_expenses:,.0f}‚ÇΩ

üìã **–í—Å–µ–≥–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π:** {len(transactions)}

üîù **–¢–æ–ø —Ä–∞—Å—Ö–æ–¥–æ–≤:**
"""
        
        for i, (category, amount) in enumerate(top_expenses, 1):
            category_name = self.get_category_name(category, 'expenses')
            stats_text += f"{i}. {category_name}: {amount:,.0f}‚ÇΩ\n"
        
        if not top_expenses:
            stats_text += "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Ä–∞—Å—Ö–æ–¥–∞—Ö\n"
        
        keyboard = [
            [InlineKeyboardButton("üì± –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", web_app=WebAppInfo(url=self.webapp_url))],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="finance_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        if update.callback_query:
            await update.callback_query.edit_message_text(
                stats_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        else:
            await update.message.reply_text(
                stats_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
    
    async def show_balance(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å"""
        user_id = update.effective_user.id
        user_data = self.get_user_data(user_id)
        
        transactions = user_data.get('transactions', [])
        total_income = sum(t['amount'] for t in transactions if t['type'] == 'income')
        total_expenses = sum(t['amount'] for t in transactions if t['type'] == 'expense')
        balance = total_income - total_expenses
        
        balance_text = f"""
üí∞ **–¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å**

üíµ **–ë–∞–ª–∞–Ω—Å:** {balance:,.0f}‚ÇΩ
üìà **–î–æ—Ö–æ–¥—ã:** {total_income:,.0f}‚ÇΩ
üìâ **–†–∞—Å—Ö–æ–¥—ã:** {total_expenses:,.0f}‚ÇΩ

{'üéâ –û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞!' if balance > 0 else '‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ –∫ —Ä–∞—Å—Ö–æ–¥–∞–º!' if balance < 0 else '‚öñÔ∏è –ë–∞–ª–∞–Ω—Å —Å–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω!'}
        """
        
        keyboard = [
            [InlineKeyboardButton("üì± –î–µ—Ç–∞–ª—å–Ω–∞—è –∞–Ω–∞–ª–∏—Ç–∏–∫–∞", web_app=WebAppInfo(url=self.webapp_url))],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            balance_text,
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def handle_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = update.callback_query
        await query.answer()
        
        if query.data == "main_menu":
            await self.start_command(update, context)
        elif query.data == "finance_menu":
            await self.show_finance_menu(update, context)
        elif query.data == "show_stats":
            await self.show_statistics(update, context)
        elif query.data == "add_income":
            await self.show_category_selection(update, context, "income")
        elif query.data == "add_expense":
            await self.show_category_selection(update, context, "expense")
        elif query.data.startswith("category_"):
            parts = query.data.split("_")
            if len(parts) >= 3:
                transaction_type = parts[1]
                category = parts[2]
                await self.request_amount(update, context, transaction_type, category)
        elif query.data == "settings":
            await self.show_settings(update, context)
    
    async def show_category_selection(self, update: Update, context: ContextTypes.DEFAULT_TYPE, transaction_type: str):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
        categories = self.categories[transaction_type]
        
        keyboard = []
        row = []
        for name, code in categories.items():
            row.append(InlineKeyboardButton(name, callback_data=f"category_{transaction_type}_{code}"))
            if len(row) == 2:
                keyboard.append(row)
                row = []
        
        if row:
            keyboard.append(row)
        
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="finance_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        type_text = "–¥–æ—Ö–æ–¥" if transaction_type == "income" else "—Ä–∞—Å—Ö–æ–¥"
        
        await update.callback_query.edit_message_text(
            f"–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –¥–ª—è {type_text}:",
            reply_markup=reply_markup
        )
    
    async def request_amount(self, update: Update, context: ContextTypes.DEFAULT_TYPE, transaction_type: str, category: str):
        """–ó–∞–ø—Ä–æ—Å–∏—Ç—å —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        context.user_data['pending_transaction'] = {
            'type': transaction_type,
            'category': category
        }
        
        type_text = "–¥–æ—Ö–æ–¥–∞" if transaction_type == "income" else "—Ä–∞—Å—Ö–æ–¥–∞"
        category_name = self.get_category_name(category, transaction_type)
        
        await update.callback_query.edit_message_text(
            f"üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {type_text} –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{category_name}':\n\n"
            f"–ü—Ä–∏–º–µ—Ä—ã:\n"
            f"‚Ä¢ 5000\n"
            f"‚Ä¢ 5000 –∑–∞—Ä–ø–ª–∞—Ç–∞\n"
            f"‚Ä¢ 1500.50 –æ–±–µ–¥",
            reply_markup=InlineKeyboardMarkup([[
                InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="finance_menu")
            ]])
        )
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        text = update.message.text.strip()
        user_id = update.effective_user.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∞—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è
        if 'pending_transaction' in context.user_data:
            await self.process_transaction_input(update, context, text)
            return
        
        # –ë—ã—Å—Ç—Ä—ã–π –≤–≤–æ–¥ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
        if text.startswith('+') or text.startswith('-'):
            await self.process_quick_transaction(update, context, text)
            return
        
        # –û–±—ã—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await update.message.reply_text(
            "üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start - –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n"
            "‚Ä¢ /app - –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n"
            "‚Ä¢ /finance - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–Ω—Å–∞–º–∏\n"
            "‚Ä¢ /help - —Å–ø—Ä–∞–≤–∫–∞\n\n"
            "–ò–ª–∏ –≤–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å + –∏–ª–∏ - –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!"
        )
    
    async def process_transaction_input(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            parts = text.split(' ', 1)
            amount = float(parts[0])
            description = parts[1] if len(parts) > 1 else ""
            
            if amount <= 0:
                await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                return
            
            pending = context.user_data['pending_transaction']
            user_id = update.effective_user.id
            user_data = self.get_user_data(user_id)
            
            transaction = {
                'id': len(user_data['transactions']) + 1,
                'type': pending['type'],
                'category': pending['category'],
                'amount': amount,
                'description': description,
                'date': datetime.now().isoformat(),
                'timestamp': datetime.now().timestamp()
            }
            
            user_data['transactions'].append(transaction)
            self.save_data()
            
            type_text = "–¥–æ—Ö–æ–¥" if pending['type'] == 'income' else "—Ä–∞—Å—Ö–æ–¥"
            category_name = self.get_category_name(pending['category'], pending['type'])
            
            await update.message.reply_text(
                f"‚úÖ {type_text.title()} –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üí∞ –°—É–º–º–∞: {amount:,.0f}‚ÇΩ\n"
                f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {category_name}\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stats –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏!"
            )
            
            del context.user_data['pending_transaction']
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!")
            logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
    
    async def process_quick_transaction(self, update: Update, context: ContextTypes.DEFAULT_TYPE, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏"""
        try:
            parts = text.split(' ', 1)
            amount_str = parts[0][1:]  # –£–±–∏—Ä–∞–µ–º + –∏–ª–∏ -
            amount = float(amount_str)
            description = parts[1] if len(parts) > 1 else ""
            
            if amount <= 0:
                await update.message.reply_text("‚ùå –°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª—å—à–µ 0!")
                return
            
            transaction_type = 'income' if text.startswith('+') else 'expense'
            category = 'other'  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é
            
            user_id = update.effective_user.id
            user_data = self.get_user_data(user_id)
            
            transaction = {
                'id': len(user_data['transactions']) + 1,
                'type': transaction_type,
                'category': category,
                'amount': amount,
                'description': description,
                'date': datetime.now().isoformat(),
                'timestamp': datetime.now().timestamp()
            }
            
            user_data['transactions'].append(transaction)
            self.save_data()
            
            type_text = "–¥–æ—Ö–æ–¥" if transaction_type == 'income' else "—Ä–∞—Å—Ö–æ–¥"
            
            await update.message.reply_text(
                f"‚úÖ {type_text.title()} –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"üí∞ –°—É–º–º–∞: {amount:,.0f}‚ÇΩ\n"
                f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {description or '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n\n"
                f"üí° –î–ª—è –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ —É—á–µ—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /finance –∏–ª–∏ /app!"
            )
            
        except ValueError:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å—É–º–º—ã! –ü—Ä–∏–º–µ—Ä: +5000 –∏–ª–∏ -1500")
        except Exception as e:
            await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏!")
            logger.error(f"–û—à–∏–±–∫–∞ –±—ã—Å—Ç—Ä–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
    
    async def show_settings(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"""
        keyboard = [
            [InlineKeyboardButton("üì± –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", web_app=WebAppInfo(url=self.webapp_url))],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]
        ]
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.callback_query.edit_message_text(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n"
            "–î–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:\n"
            "‚Ä¢ üí± –í–∞–ª—é—Ç–∞\n"
            "‚Ä¢ üé® –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            "‚Ä¢ üåç –Ø–∑—ã–∫",
            reply_markup=reply_markup,
            parse_mode=ParseMode.MARKDOWN
        )
    
    def get_category_name(self, category_code: str, transaction_type: str) -> str:
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ –∫–æ–¥—É"""
        categories = self.categories[transaction_type]
        for name, code in categories.items():
            if code == category_code:
                return name
        return category_code
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ Finance Bot")
        await self.application.run_polling()

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    bot = SimpleFinanceBot()
    asyncio.run(bot.run())

if __name__ == "__main__":
    main()
