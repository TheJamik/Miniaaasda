#!/usr/bin/env python3
"""
Telegram App - –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–ª—è Telegram
–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞—Ç—å –≤ Telegram –∫–∞–∫ App
"""

import asyncio
import json
import logging
import os
from datetime import datetime
from typing import Dict, List, Optional
from dotenv import load_dotenv

from fastapi import FastAPI, Request, HTTPException, Depends
from fastapi.responses import HTMLResponse, JSONResponse
from fastapi.staticfiles import StaticFiles
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
import uvicorn

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramFinanceApp:
    def __init__(self):
        self.app = FastAPI(
            title="Telegram Finance Tracker App",
            description="–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–ª—è Telegram",
            version="1.0.0"
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –¥–ª—è Telegram
        self.app.add_middleware(
            CORSMiddleware,
            allow_origins=["*"],
            allow_credentials=True,
            allow_methods=["*"],
            allow_headers=["*"],
        )
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
        self.app.mount("/static", StaticFiles(directory="static"), name="static")
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à–∞–±–ª–æ–Ω–æ–≤
        self.templates = Jinja2Templates(directory="templates")
        
        # –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        self.data_file = "telegram_app_data.json"
        self.categories = {
            'expenses': {
                'üçî –ï–¥–∞': 'food',
                'üöó –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç': 'transport',
                'üè† –ñ–∏–ª—å–µ': 'housing',
                'üëï –û–¥–µ–∂–¥–∞': 'clothing',
                'üíä –ó–¥–æ—Ä–æ–≤—å–µ': 'health',
                'üéÆ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è': 'entertainment',
                'üìö –û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ': 'education',
                'üí≥ –ö—Ä–µ–¥–∏—Ç—ã': 'loans',
                'üì± –¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏': 'technology',
                'üè¶ –ù–∞–ª–æ–≥–∏': 'taxes',
                'üéÅ –ü–æ–¥–∞—Ä–∫–∏': 'gifts',
                '‚úàÔ∏è –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è': 'travel',
                'üíº –ë–∏–∑–Ω–µ—Å': 'business',
                'üîß –£—Å–ª—É–≥–∏': 'services',
                'üì¶ –ü–æ–∫—É–ø–∫–∏': 'shopping',
                'üí∞ –î—Ä—É–≥–æ–µ': 'other'
            },
            'income': {
                'üíº –ó–∞—Ä–ø–ª–∞—Ç–∞': 'salary',
                'üè¢ –ë–∏–∑–Ω–µ—Å': 'business',
                'üìà –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏': 'investments',
                'üéÅ –ü–æ–¥–∞—Ä–∫–∏': 'gifts',
                'üè† –ê—Ä–µ–Ω–¥–∞': 'rental',
                'üíª –§—Ä–∏–ª–∞–Ω—Å': 'freelance',
                'üéØ –ü—Ä–µ–º–∏–∏': 'bonuses',
                'üí∞ –î—Ä—É–≥–æ–µ': 'other'
            }
        }
        
        self.load_data()
        self.setup_routes()
    
    def load_data(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞"""
        if os.path.exists(self.data_file):
            try:
                with open(self.data_file, 'r', encoding='utf-8') as f:
                    self.data = json.load(f)
            except:
                self.data = {}
        else:
            self.data = {}
    
    def save_data(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª"""
        with open(self.data_file, 'w', encoding='utf-8') as f:
            json.dump(self.data, f, ensure_ascii=False, indent=2)
    
    def get_user_data(self, user_id: str) -> Dict:
        """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id not in self.data:
            self.data[user_id] = {
                'transactions': [],
                'budgets': {},
                'goals': [],
                'currency': 'RUB',
                'settings': {
                    'theme': 'light',
                    'notifications': True,
                    'language': 'ru'
                }
            }
        return self.data[user_id]
    
    def setup_routes(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        
        @self.app.get("/", response_class=HTMLResponse)
        async def telegram_app_home(request: Request):
            """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ Telegram App"""
            return self.templates.TemplateResponse("telegram_app.html", {
                "request": request,
                "title": "Telegram Finance Tracker"
            })
        
        @self.app.get("/app", response_class=HTMLResponse)
        async def telegram_app_main(request: Request):
            """–û—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è Telegram"""
            return self.templates.TemplateResponse("telegram_app.html", {
                "request": request,
                "title": "Finance Tracker",
                "categories": self.categories
            })
        
        @self.app.get("/api/user/{user_id}")
        async def get_user_data(user_id: str):
            """–ü–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
            user_data = self.get_user_data(user_id)
            return JSONResponse(content=user_data)
        
        @self.app.post("/api/transaction")
        async def add_transaction(request: Request):
            """–î–æ–±–∞–≤–∏—Ç—å —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é"""
            try:
                data = await request.json()
                user_id = data.get('user_id')
                transaction_type = data.get('type')
                category = data.get('category')
                amount = float(data.get('amount', 0))
                description = data.get('description', '')
                
                if not all([user_id, transaction_type, category, amount > 0]):
                    raise HTTPException(status_code=400, detail="–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                
                user_data = self.get_user_data(user_id)
                
                transaction = {
                    'id': len(user_data['transactions']) + 1,
                    'type': transaction_type,
                    'category': category,
                    'amount': amount,
                    'description': description,
                    'date': datetime.now().isoformat(),
                    'timestamp': datetime.now().timestamp()
                }
                
                user_data['transactions'].append(transaction)
                self.save_data()
                
                return JSONResponse(content={
                    "success": True,
                    "transaction": transaction,
                    "message": "–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞"
                })
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {e}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        
        @self.app.get("/api/statistics/{user_id}")
        async def get_statistics(user_id: str, period: str = "month"):
            """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
            try:
                user_data = self.get_user_data(user_id)
                
                # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø–µ—Ä–∏–æ–¥—É
                now = datetime.now()
                if period == "week":
                    start_date = now.replace(day=now.day - 7)
                elif period == "month":
                    start_date = now.replace(day=1)
                elif period == "year":
                    start_date = now.replace(month=1, day=1)
                else:
                    start_date = now.replace(day=1)
                
                filtered_transactions = [
                    t for t in user_data['transactions']
                    if datetime.fromtimestamp(t['timestamp']) >= start_date
                ]
                
                total_income = sum(t['amount'] for t in filtered_transactions if t['type'] == 'income')
                total_expenses = sum(t['amount'] for t in filtered_transactions if t['type'] == 'expense')
                balance = total_income - total_expenses
                
                # –¢–æ–ø –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ä–∞—Å—Ö–æ–¥–æ–≤
                expense_categories = {}
                for t in filtered_transactions:
                    if t['type'] == 'expense':
                        cat = t['category']
                        expense_categories[cat] = expense_categories.get(cat, 0) + t['amount']
                
                top_expenses = sorted(expense_categories.items(), key=lambda x: x[1], reverse=True)[:5]
                
                return JSONResponse(content={
                    "period": period,
                    "total_income": total_income,
                    "total_expenses": total_expenses,
                    "balance": balance,
                    "top_expenses": top_expenses,
                    "currency": user_data['currency']
                })
                
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
                raise HTTPException(status_code=500, detail="–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
        
        @self.app.get("/api/categories")
        async def get_categories():
            """–ü–æ–ª—É—á–∏—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"""
            return JSONResponse(content=self.categories)
        
        @self.app.get("/health")
        async def health_check():
            """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
            return JSONResponse(content={
                "status": "healthy",
                "timestamp": datetime.now().isoformat(),
                "version": "1.0.0",
                "type": "telegram_app"
            })
        
        @self.app.get("/telegram-webapp-info")
        async def telegram_webapp_info():
            """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Telegram WebApp"""
            return JSONResponse(content={
                "name": "Finance Tracker",
                "description": "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä –¥–ª—è Telegram",
                "version": "1.0.0",
                "url": "https://your-domain.com",
                "features": [
                    "–£—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤",
                    "–ö–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π",
                    "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã",
                    "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —Ü–µ–ª–∏",
                    "–ë—é–¥–∂–µ—Ç—ã"
                ]
            })
    
    def run(self, host: str = "0.0.0.0", port: int = 3000):
        """–ó–∞–ø—É—Å–∫ Telegram App"""
        logger.info(f"üöÄ –ó–∞–ø—É—Å–∫ Telegram Finance App –Ω–∞ {host}:{port}")
        
        uvicorn.run(
            self.app,
            host=host,
            port=port,
            log_level="info"
        )

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    app = TelegramFinanceApp()
    app.run()

if __name__ == "__main__":
    main()
