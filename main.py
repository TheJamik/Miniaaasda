#!/usr/bin/env python3
"""
Telegram Bot - –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
"""

import asyncio
import logging
import os
from datetime import datetime
from dotenv import load_dotenv

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, 
    CommandHandler, 
    MessageHandler, 
    CallbackQueryHandler,
    filters,
    ContextTypes
)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
from modules.finance_tracker import FinanceTracker

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

class TelegramBot:
    def __init__(self):
        self.token = os.getenv('BOT_TOKEN')
        if not self.token:
            raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        
        self.application = Application.builder().token(self.token).build()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –º–æ–¥—É–ª–∏
        self.finance_tracker = FinanceTracker()
        
        self.setup_handlers()
    
    def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –ö–æ–º–∞–Ω–¥—ã
        self.application.add_handler(CommandHandler("start", self.start_command))
        self.application.add_handler(CommandHandler("help", self.help_command))
        self.application.add_handler(CommandHandler("info", self.info_command))
        self.application.add_handler(CommandHandler("menu", self.menu_command))
        self.application.add_handler(CommandHandler("finance", self.finance_command))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏
        self.application.add_handler(CallbackQueryHandler(self.button_callback))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message))
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
        self.application.add_error_handler(self.error_handler)
    
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = update.effective_user
        welcome_message = f"""
ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

–Ø —É–º–Ω—ã–π Telegram –±–æ—Ç —Å –º–Ω–æ–∂–µ—Å—Ç–≤–æ–º –ø–æ–ª–µ–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π.

üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:
/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/info - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
/menu - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.
        """
        
        keyboard = [
            [InlineKeyboardButton("üìã –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
            [InlineKeyboardButton("‚ÑπÔ∏è –ü–æ–º–æ—â—å", callback_data="help")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="stats")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(welcome_message, reply_markup=reply_markup)
    
    async def help_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:**

üîπ `/start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
üîπ `/help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
üîπ `/info` - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
üîπ `/menu` - –û—Ç–∫—Ä—ã—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é

üí° **–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, –∏ —è –æ—Ç–≤–µ—á—É
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –±—ã—Å—Ç—Ä–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
‚Ä¢ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç 24/7

üÜò **–ù—É–∂–Ω–∞ –ø–æ–º–æ—â—å?**
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /info
        """
        await update.message.reply_text(help_text, parse_mode='Markdown')
    
    async def info_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /info"""
        info_text = f"""
‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**

ü§ñ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {os.getenv('BOT_NAME', 'Telegram Bot')}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {os.getenv('BOT_DESCRIPTION', '–£–º–Ω—ã–π Telegram –±–æ—Ç')}
üïí **–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üêç **–í–µ—Ä—Å–∏—è Python:** {asyncio.get_event_loop().get_debug()}
üìä **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ

üîß **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ python-telegram-bot
‚Ä¢ asyncio
‚Ä¢ python-dotenv

üíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Cursor AI
        """
        await update.message.reply_text(info_text, parse_mode='Markdown')
    
    async def menu_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /menu"""
        await self.show_main_menu(update, context)
    
    async def finance_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /finance"""
        await self.finance_tracker.show_finance_menu(update, context)
    
    async def show_main_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        keyboard = [
            [
                InlineKeyboardButton("üí∞ –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä", callback_data="finance_menu"),
                InlineKeyboardButton("üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏", callback_data="text_functions")
            ],
            [
                InlineKeyboardButton("üéÆ –ò–≥—Ä—ã", callback_data="games"),
                InlineKeyboardButton("üìä –£—Ç–∏–ª–∏—Ç—ã", callback_data="utilities")
            ],
            [
                InlineKeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", callback_data="settings"),
                InlineKeyboardButton("‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", callback_data="info")
            ],
            [
                InlineKeyboardButton("‚ùì –ü–æ–º–æ—â—å", callback_data="help")
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        menu_text = """
üéØ **–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é**

–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ñ—É–Ω–∫—Ü–∏–π:
        """
        
        if update.callback_query:
            await update.callback_query.edit_message_text(menu_text, reply_markup=reply_markup, parse_mode='Markdown')
        else:
            await update.message.reply_text(menu_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        # –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä
        if query.data.startswith("finance_"):
            await self.handle_finance_callback(update, context)
            return
        
        if query.data == "main_menu":
            await self.show_main_menu(update, context)
        
        elif query.data == "help":
            help_text = """
üìö **–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Ñ—É–Ω–∫—Ü–∏—è–º:**

üí∞ **–§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ç—Ä–µ–∫–µ—Ä** - —É—á–µ—Ç –¥–æ—Ö–æ–¥–æ–≤ –∏ —Ä–∞—Å—Ö–æ–¥–æ–≤
üîπ **–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏** - —Ä–∞–±–æ—Ç–∞ —Å —Ç–µ–∫—Å—Ç–æ–º
üîπ **–ò–≥—Ä—ã** - –º–∏–Ω–∏-–∏–≥—Ä—ã –¥–ª—è —Ä–∞–∑–≤–ª–µ—á–µ–Ω–∏—è
üîπ **–£—Ç–∏–ª–∏—Ç—ã** - –ø–æ–ª–µ–∑–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã
üîπ **–ù–∞—Å—Ç—Ä–æ–π–∫–∏** - –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
üîπ **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è** - –¥–∞–Ω–Ω—ã–µ –æ –±–æ—Ç–µ

üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –º–µ–Ω—é.
            """
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(help_text, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif query.data == "stats":
            stats_text = f"""
üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:**

üë• **–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:** {update.effective_user.first_name}
üÜî **ID:** {update.effective_user.id}
üïí **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
üìÖ **–î–∞—Ç–∞:** {datetime.now().strftime('%Y-%m-%d')}

‚ö° **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω
            """
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(stats_text, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif query.data == "text_functions":
            text_func_text = """
üìù **–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:**

üîπ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç
üîπ –Ø –æ—Ç–≤–µ—á—É –Ω–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
üîπ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é —ç–º–æ–¥–∑–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
üîπ –ú–æ–≥—É –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç

üí° –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å!
            """
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(text_func_text, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif query.data == "games":
            games_text = """
üéÆ **–ò–≥—Ä—ã:**

üé≤ **–ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä—ã"** - —Å–∫–æ—Ä–æ –∑–¥–µ—Å—å –ø–æ—è–≤—è—Ç—Å—è –º–∏–Ω–∏-–∏–≥—Ä—ã!

–ü–ª–∞–Ω–∏—Ä—É–µ–º—ã–µ –∏–≥—Ä—ã:
‚Ä¢ üéØ –£–≥–∞–¥–∞–π —á–∏—Å–ª–æ
‚Ä¢ ‚úÇÔ∏è –ö–∞–º–µ–Ω—å, –Ω–æ–∂–Ω–∏—Ü—ã, –±—É–º–∞–≥–∞
‚Ä¢ üé≤ –ö–æ—Å—Ç–∏
‚Ä¢ üß© –í–∏–∫—Ç–æ—Ä–∏–Ω—ã

üîß –í —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...
            """
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(games_text, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif query.data == "utilities":
            utils_text = """
üìä **–£—Ç–∏–ª–∏—Ç—ã:**

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã:**
‚Ä¢ üìÖ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤—Ä–µ–º–µ–Ω–∏
‚Ä¢ üìè –ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –µ–¥–∏–Ω–∏—Ü
‚Ä¢ üå§Ô∏è –ü–æ–≥–æ–¥–∞ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)
‚Ä¢ üì∞ –ù–æ–≤–æ—Å—Ç–∏ (–≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ)

üí° –í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é —É—Ç–∏–ª–∏—Ç—É
            """
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(utils_text, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif query.data == "settings":
            settings_text = """
‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏:**

üîß **–î–æ—Å—Ç—É–ø–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:**
‚Ä¢ üåç –Ø–∑—ã–∫ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
‚Ä¢ üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
‚Ä¢ üé® –¢–µ–º–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è
‚Ä¢ üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞

üí° –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö
            """
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(settings_text, reply_markup=reply_markup, parse_mode='Markdown')
        
        elif query.data == "info":
            info_text = f"""
‚ÑπÔ∏è **–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:**

ü§ñ **–ù–∞–∑–≤–∞–Ω–∏–µ:** {os.getenv('BOT_NAME', 'Telegram Bot')}
üìù **–û–ø–∏—Å–∞–Ω–∏–µ:** {os.getenv('BOT_DESCRIPTION', '–£–º–Ω—ã–π Telegram –±–æ—Ç')}
üïí **–í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞:** {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
üìä **–°—Ç–∞—Ç—É—Å:** –ê–∫—Ç–∏–≤–µ–Ω ‚úÖ

üîß **–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:**
‚Ä¢ python-telegram-bot
‚Ä¢ asyncio
‚Ä¢ python-dotenv

üíª **–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:** –°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é Cursor AI
            """
            keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(info_text, reply_markup=reply_markup, parse_mode='Markdown')
    
    async def handle_finance_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback'–æ–≤ —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞"""
        query = update.callback_query
        
        if query.data == "finance_menu":
            await self.finance_tracker.show_finance_menu(update, context)
        
        elif query.data == "finance_add_income":
            await self.finance_tracker.show_category_selection(update, context, "income")
        
        elif query.data == "finance_add_expense":
            await self.finance_tracker.show_category_selection(update, context, "expense")
        
        elif query.data.startswith("finance_cat_"):
            await self.finance_tracker.handle_category_selection(update, context)
        
        elif query.data == "finance_stats":
            await self.finance_tracker.show_statistics(update, context)
        
        elif query.data == "finance_history":
            await self.finance_tracker.show_history(update, context)
        
        elif query.data == "finance_goals":
            await self.finance_tracker.show_goals(update, context)
        
        elif query.data == "finance_budgets":
            await self.finance_tracker.show_budgets(update, context)
        
        elif query.data == "finance_settings":
            await self.finance_tracker.show_settings(update, context)
        
        elif query.data == "finance_reports":
            await self.finance_tracker.show_reports(update, context)
    
    async def handle_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        user_message = update.message.text
        user = update.effective_user
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        if 'finance_type' in context.user_data:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–≤–æ–¥ –¥–ª—è —Ñ–∏–Ω–∞–Ω—Å–æ–≤–æ–≥–æ —Ç—Ä–µ–∫–µ—Ä–∞
            if 'finance_amount' not in context.user_data:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É
                handled = await self.finance_tracker.handle_amount_input(update, context)
                if handled:
                    return
            else:
                # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –æ–ø–∏—Å–∞–Ω–∏–µ
                handled = await self.finance_tracker.handle_description_input(update, context)
                if handled:
                    return
        
        # –ü—Ä–æ—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = f"""
üí¨ **–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** {user_message}

üëã –ü—Ä–∏–≤–µ—Ç, {user.first_name}! 

–Ø –ø–æ–ª—É—á–∏–ª –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /menu –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –∏–ª–∏ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.

üïí **–í—Ä–µ–º—è:** {datetime.now().strftime('%H:%M:%S')}
        """
        
        await update.message.reply_text(response, parse_mode='Markdown')
    
    async def error_handler(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫"""
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update}: {context.error}")
        
        if update and update.effective_message:
            await update.effective_message.reply_text(
                "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏."
            )
    
    async def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ Telegram –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        await self.application.initialize()
        await self.application.start()
        await self.application.updater.start_polling()
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        
        # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        try:
            await asyncio.Event().wait()
        except KeyboardInterrupt:
            logger.info("üõë –ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –æ—Å—Ç–∞–Ω–æ–≤–∫–∏...")
        finally:
            await self.application.updater.stop()
            await self.application.stop()
            await self.application.shutdown()
            logger.info("üëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    try:
        bot = TelegramBot()
        await bot.run()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        raise

if __name__ == "__main__":
    asyncio.run(main())
